// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header matches snapshot 1`] = `
.c2 {
  white-space: nowrap;
  justify-self: end;
  grid-area: header-right;
  margin-right: 10px;
}

.c3 {
  display: inline-block;
  text-shadow: 1px 1px 0 #000;
  font-size: 1rem;
  font-weight: 600;
  padding: 0.3rem;
  border: 2px solid;
  border-radius: 3px;
  cursor: pointer;
  -webkit-transition: background-color 0.3s ease-out;
  transition: background-color 0.3s ease-out;
  white-space: nowrap;
  color: white;
  border-color: blueviolet;
}

.c3:active {
  box-shadow: 0 2px 6px rgba(0,0,0,0.3) inset;
}

.c3:hover {
  background-color: blueviolet;
}

.c4 {
  display: inline-block;
  text-shadow: 1px 1px 0 #000;
  font-size: 1rem;
  font-weight: 600;
  padding: 0.3rem;
  border: 2px solid;
  border-radius: 3px;
  cursor: pointer;
  -webkit-transition: background-color 0.3s ease-out;
  transition: background-color 0.3s ease-out;
  white-space: nowrap;
  color: white;
  border-color: tomato;
  margin-left: 10px;
}

.c4:active {
  box-shadow: 0 2px 6px rgba(0,0,0,0.3) inset;
}

.c4:hover {
  background-color: tomato;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  grid-column: span 2;
  position: relative;
}

.c5 > img {
  width: 50px;
  position: absolute;
  top: -30px;
  left: 10px;
}

.c5 > textarea {
  padding: 10px;
  outline: none;
  min-height: 56px;
  width: 100%;
  resize: vertical;
  border: none;
  margin-right: 1px;
}

.c5 > button {
  border: none;
  outline: none;
  cursor: pointer;
  background-color: #fffacd;
  padding: 0;
}

.c5 > button:active {
  background-color: #FFFF99;
}

.c0 {
  grid-area: header;
  display: grid;
  grid-gap: 10px;
  background-color: #393939;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: 'header-left header-right';
  place-items: center center;
  padding: 10px 0 1px 0;
}

.c1 {
  font-size: 1.5rem;
  font-family: 'Play',sans-serif;
  color: #FFFF99;
  margin: 0 0 0 65px;
  justify-self: start;
  -webkit-letter-spacing: 0.05rem;
  -moz-letter-spacing: 0.05rem;
  -ms-letter-spacing: 0.05rem;
  letter-spacing: 0.05rem;
}

@media screen and (min-width:600px) {
  .c2 {
    margin-right: 0;
  }
}

@media screen and (min-width:600px) {
  .c3 {
    padding: 0.3rem 0.6rem;
  }
}

@media screen and (min-width:600px) {
  .c4 {
    padding: 0.3rem 0.6rem;
  }
}

@media screen and (min-width:600px) {
  .c5 > img {
    left: 0;
  }
}

@media screen and (min-width:600px) {
  .c0 {
    padding: 10px 20px 1px 20px;
  }
}

@media screen and (min-width:600px) {
  .c1 {
    margin-left: 70px;
  }
}

<Headerstyle__header>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Headerstyle__header-sc-6zuvh-0",
          "isStatic": false,
          "lastClassName": "c0",
          "rules": Array [
            "grid-area:header;display:grid;grid-gap:10px;background-color:",
            [Function],
            ";grid-template-columns:1fr 1fr;grid-template-areas:'header-left header-right';place-items:center center;padding:10px 0 1px 0;@media screen and (min-width:600px){padding:10px 20px 1px 20px;}",
          ],
        },
        "displayName": "Headerstyle__header",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Headerstyle__header-sc-6zuvh-0",
        "target": "header",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <header
      className="c0"
    >
      <Headerstyle__h1>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Headerstyle__h1-sc-6zuvh-1",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "font-size:1.5rem;font-family:'Play',sans-serif;color:",
                  [Function],
                  ";margin:0 0 0 65px;justify-self:start;letter-spacing:0.05rem;@media screen and (min-width:600px){margin-left:70px;}",
                ],
              },
              "displayName": "Headerstyle__h1",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "Headerstyle__h1-sc-6zuvh-1",
              "target": "h1",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <h1
            className="c1"
          >
            Starter
          </h1>
        </StyledComponent>
      </Headerstyle__h1>
      <SignOn>
        <Query
          query={
            Object {
              "definitions": Array [
                Object {
                  "directives": Array [],
                  "kind": "OperationDefinition",
                  "name": Object {
                    "kind": "Name",
                    "value": "IS_LOGGED_IN",
                  },
                  "operation": "query",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [],
                        "directives": Array [
                          Object {
                            "arguments": Array [],
                            "kind": "Directive",
                            "name": Object {
                              "kind": "Name",
                              "value": "client",
                            },
                          },
                        ],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "isLoggedIn",
                        },
                        "selectionSet": undefined,
                      },
                    ],
                  },
                  "variableDefinitions": Array [],
                },
              ],
              "kind": "Document",
              "loc": Object {
                "end": 51,
                "start": 0,
              },
            }
          }
        >
          <SignOnstyle__signOn>
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "SignOnstyle__signOn-sc-17v8fz4-0",
                    "isStatic": true,
                    "lastClassName": "c2",
                    "rules": Array [
                      "white-space:nowrap;justify-self:end;grid-area:header-right;margin-right:10px;@media screen and (min-width:600px){margin-right:0;}",
                    ],
                  },
                  "displayName": "SignOnstyle__signOn",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "SignOnstyle__signOn-sc-17v8fz4-0",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c2"
              >
                <SignOnstyle__purpleBtn
                  onClick={[Function]}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SignOnstyle__purpleBtn-sc-17v8fz4-1",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "display:inline-block;text-shadow:1px 1px 0 #000;font-size:1rem;font-weight:600;padding:0.3rem;border:2px solid;border-radius:3px;cursor:pointer;transition:background-color 0.3s ease-out;white-space:nowrap;color:white;&:active{box-shadow:0 2px 6px rgba(0,0,0,0.3) inset;}@media screen and (min-width:600px){padding:0.3rem 0.6rem;}",
                            "border-color:",
                            [Function],
                            ";&:hover{background-color:",
                            [Function],
                            ";}",
                          ],
                        },
                        "displayName": "SignOnstyle__purpleBtn",
                        "foldedComponentIds": Array [
                          "buttonstyle__linkBtn-sc-5slzqu-0",
                          "buttonstyle__purpleLinkBtn-sc-5slzqu-1",
                        ],
                        "render": [Function],
                        "styledComponentId": "SignOnstyle__purpleBtn-sc-17v8fz4-1",
                        "target": "a",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                  >
                    <a
                      className="c3"
                      onClick={[Function]}
                    >
                      Sign In
                    </a>
                  </StyledComponent>
                </SignOnstyle__purpleBtn>
                <SignOnstyle__orangeBtn
                  onClick={[Function]}
                >
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "SignOnstyle__orangeBtn-sc-17v8fz4-2",
                          "isStatic": false,
                          "lastClassName": "c4",
                          "rules": Array [
                            "display:inline-block;text-shadow:1px 1px 0 #000;font-size:1rem;font-weight:600;padding:0.3rem;border:2px solid;border-radius:3px;cursor:pointer;transition:background-color 0.3s ease-out;white-space:nowrap;color:white;&:active{box-shadow:0 2px 6px rgba(0,0,0,0.3) inset;}@media screen and (min-width:600px){padding:0.3rem 0.6rem;}",
                            "border-color:",
                            [Function],
                            ";&:hover{background-color:",
                            [Function],
                            ";}",
                            "margin-left:10px;",
                          ],
                        },
                        "displayName": "SignOnstyle__orangeBtn",
                        "foldedComponentIds": Array [
                          "buttonstyle__linkBtn-sc-5slzqu-0",
                          "buttonstyle__orangeLinkBtn-sc-5slzqu-2",
                        ],
                        "render": [Function],
                        "styledComponentId": "SignOnstyle__orangeBtn-sc-17v8fz4-2",
                        "target": "a",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                    onClick={[Function]}
                  >
                    <a
                      className="c4"
                      onClick={[Function]}
                    >
                      Sign Up
                    </a>
                  </StyledComponent>
                </SignOnstyle__orangeBtn>
              </div>
            </StyledComponent>
          </SignOnstyle__signOn>
        </Query>
      </SignOn>
      <IdeaCardForm>
        <Mutation
          mutation={
            Object {
              "definitions": Array [
                Object {
                  "directives": Array [],
                  "kind": "OperationDefinition",
                  "name": Object {
                    "kind": "Name",
                    "value": "CREATE_IDEA_MUTATION",
                  },
                  "operation": "mutation",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [
                          Object {
                            "kind": "Argument",
                            "name": Object {
                              "kind": "Name",
                              "value": "content",
                            },
                            "value": Object {
                              "kind": "Variable",
                              "name": Object {
                                "kind": "Name",
                                "value": "content",
                              },
                            },
                          },
                        ],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "createIdea",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                              "selectionSet": undefined,
                            },
                          ],
                        },
                      },
                    ],
                  },
                  "variableDefinitions": Array [
                    Object {
                      "defaultValue": undefined,
                      "directives": Array [],
                      "kind": "VariableDefinition",
                      "type": Object {
                        "kind": "NonNullType",
                        "type": Object {
                          "kind": "NamedType",
                          "name": Object {
                            "kind": "Name",
                            "value": "String",
                          },
                        },
                      },
                      "variable": Object {
                        "kind": "Variable",
                        "name": Object {
                          "kind": "Name",
                          "value": "content",
                        },
                      },
                    },
                  ],
                },
              ],
              "kind": "Document",
              "loc": Object {
                "end": 109,
                "start": 0,
              },
            }
          }
          onError={[Function]}
          refetchQueries={
            Array [
              Object {
                "query": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "CURRENT_USER_QUERY",
                      },
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "currentUser",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "email",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "ideas",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "content",
                                        },
                                        "selectionSet": undefined,
                                      },
                                    ],
                                  },
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [
                                    Object {
                                      "arguments": Array [],
                                      "kind": "Directive",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "client",
                                      },
                                    },
                                  ],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "color",
                                  },
                                  "selectionSet": undefined,
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 148,
                    "start": 0,
                  },
                },
              },
            ]
          }
          variables={
            Object {
              "content": "",
            }
          }
        >
          <IdeaCardFormstyle__form
            onSubmit={[Function]}
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "IdeaCardFormstyle__form-sc-4er11-0",
                    "isStatic": false,
                    "lastClassName": "c5",
                    "rules": Array [
                      "display:flex;width:100%;grid-column:span 2;position:relative;> img{width:50px;position:absolute;top:-30px;left:10px;}> textarea{padding:10px;outline:none;min-height:56px;width:100%;resize:vertical;border:none;margin-right:1px;}> button{border:none;outline:none;cursor:pointer;background-color:",
                      [Function],
                      ";padding:0;&:active{background-color:",
                      [Function],
                      ";}}@media screen and (min-width:600px){> img{left:0;}}",
                    ],
                  },
                  "displayName": "IdeaCardFormstyle__form",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "IdeaCardFormstyle__form-sc-4er11-0",
                  "target": "form",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onSubmit={[Function]}
            >
              <form
                className="c5"
                onSubmit={[Function]}
              >
                <img
                  alt="ideabox"
                  src="static/ideabox.png"
                />
                <textarea
                  name="idea"
                  onChange={[Function]}
                  placeholder="What's on your mind?"
                  type="text"
                  value=""
                />
                <button
                  disabled={true}
                  type="submit"
                >
                  Add Idea
                </button>
              </form>
            </StyledComponent>
          </IdeaCardFormstyle__form>
        </Mutation>
      </IdeaCardForm>
    </header>
  </StyledComponent>
</Headerstyle__header>
`;
