// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IdeaCardContainer matches snapshot - error 1`] = `
.c0 {
  padding-left: 1rem;
  border-left: 5px solid red;
}

<DisplayErrorstyle__divError>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "DisplayErrorstyle__divError-sc-16p01e0-0",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "padding-left:1rem;border-left:5px solid red;",
          ],
        },
        "displayName": "DisplayErrorstyle__divError",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "DisplayErrorstyle__divError-sc-16p01e0-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
    />
  </StyledComponent>
</DisplayErrorstyle__divError>
`;

exports[`IdeaCardContainer matches snapshot - loaded 1`] = `
.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  margin: 20px;
}

.c3 {
  background: none;
  background-image: url('/static/delete.svg');
  position: absolute;
  right: -10px;
  top: -10px;
  height: 20px;
  width: 20px;
  border: none;
  outline: none;
  cursor: pointer;
}

.c3:active {
  right: -8px;
  top: -8px;
  height: 17px;
  width: 17px;
}

.c4 {
  width: 100%;
  outline: none;
  border: black solid 1px;
  padding: 5px;
  margin: 0;
  overflow-wrap: break-word;
  word-break: break-all;
}

.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.c1 {
  padding: 0;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
}

<IdeaCardContainerstyle__IdeaContainer>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "IdeaCardContainerstyle__IdeaContainer-sc-155izcs-0",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "display:flex;justify-content:center;",
          ],
        },
        "displayName": "IdeaCardContainerstyle__IdeaContainer",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "IdeaCardContainerstyle__IdeaContainer-sc-155izcs-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
    >
      <IdeaCardContainerstyle__ul>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "IdeaCardContainerstyle__ul-sc-155izcs-1",
                "isStatic": true,
                "lastClassName": "c1",
                "rules": Array [
                  "padding:0;flex-grow:1;",
                ],
              },
              "displayName": "IdeaCardContainerstyle__ul",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "IdeaCardContainerstyle__ul-sc-155izcs-1",
              "target": "ul",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <ul
            className="c1"
          >
            <IdeaCard
              content="mock content"
              id="1"
              key="ideaCard1"
            >
              <IdeaCardstyle__li>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "IdeaCardstyle__li-wiedry-0",
                        "isStatic": true,
                        "lastClassName": "c2",
                        "rules": Array [
                          "display:flex;position:relative;margin:20px;",
                        ],
                      },
                      "displayName": "IdeaCardstyle__li",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "IdeaCardstyle__li-wiedry-0",
                      "target": "li",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <li
                    className="c2"
                  >
                    <Mutation
                      errorPolicy="all"
                      mutation={
                        Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "DELETE_IDEA_MUTATION",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "value": Object {
                                          "kind": "Variable",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "deleteIdea",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NonNullType",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "ID",
                                      },
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "id",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 90,
                            "start": 0,
                          },
                        }
                      }
                      onError={[Function]}
                      refetchQueries={
                        Array [
                          Object {
                            "query": Object {
                              "definitions": Array [
                                Object {
                                  "directives": Array [],
                                  "kind": "OperationDefinition",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "ME_IDEAS_QUERY",
                                  },
                                  "operation": "query",
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "getUserIdeas",
                                        },
                                        "selectionSet": Object {
                                          "kind": "SelectionSet",
                                          "selections": Array [
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "id",
                                              },
                                              "selectionSet": undefined,
                                            },
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "content",
                                              },
                                              "selectionSet": undefined,
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                  "variableDefinitions": Array [],
                                },
                              ],
                              "kind": "Document",
                              "loc": Object {
                                "end": 78,
                                "start": 0,
                              },
                            },
                          },
                        ]
                      }
                      variables={
                        Object {
                          "id": "1",
                        }
                      }
                    >
                      <IdeaCardstyle__deleteBtn
                        onClick={[Function]}
                        type="button"
                      >
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "IdeaCardstyle__deleteBtn-wiedry-1",
                                "isStatic": true,
                                "lastClassName": "c3",
                                "rules": Array [
                                  "background:none;background-image:url('/static/delete.svg');position:absolute;right:-10px;top:-10px;height:20px;width:20px;border:none;outline:none;cursor:pointer;&:active{right:-8px;top:-8px;height:17px;width:17px;}",
                                ],
                              },
                              "displayName": "IdeaCardstyle__deleteBtn",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "IdeaCardstyle__deleteBtn-wiedry-1",
                              "target": "button",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onClick={[Function]}
                          type="button"
                        >
                          <button
                            className="c3"
                            onClick={[Function]}
                            type="button"
                          />
                        </StyledComponent>
                      </IdeaCardstyle__deleteBtn>
                    </Mutation>
                    <Mutation
                      errorPolicy="all"
                      mutation={
                        Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "UPDATE_IDEA_MUTATION",
                              },
                              "operation": "mutation",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "value": Object {
                                          "kind": "Variable",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                        },
                                      },
                                      Object {
                                        "kind": "Argument",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "content",
                                        },
                                        "value": Object {
                                          "kind": "Variable",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "content",
                                          },
                                        },
                                      },
                                    ],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "updateIdea",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "content",
                                          },
                                          "selectionSet": undefined,
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NonNullType",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "ID",
                                      },
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "id",
                                    },
                                  },
                                },
                                Object {
                                  "defaultValue": undefined,
                                  "directives": Array [],
                                  "kind": "VariableDefinition",
                                  "type": Object {
                                    "kind": "NonNullType",
                                    "type": Object {
                                      "kind": "NamedType",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "String",
                                      },
                                    },
                                  },
                                  "variable": Object {
                                    "kind": "Variable",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "content",
                                    },
                                  },
                                },
                              ],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 142,
                            "start": 0,
                          },
                        }
                      }
                      onError={[Function]}
                      refetchQueries={
                        Array [
                          Object {
                            "query": Object {
                              "definitions": Array [
                                Object {
                                  "directives": Array [],
                                  "kind": "OperationDefinition",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "ME_IDEAS_QUERY",
                                  },
                                  "operation": "query",
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "getUserIdeas",
                                        },
                                        "selectionSet": Object {
                                          "kind": "SelectionSet",
                                          "selections": Array [
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "id",
                                              },
                                              "selectionSet": undefined,
                                            },
                                            Object {
                                              "alias": undefined,
                                              "arguments": Array [],
                                              "directives": Array [],
                                              "kind": "Field",
                                              "name": Object {
                                                "kind": "Name",
                                                "value": "content",
                                              },
                                              "selectionSet": undefined,
                                            },
                                          ],
                                        },
                                      },
                                    ],
                                  },
                                  "variableDefinitions": Array [],
                                },
                              ],
                              "kind": "Document",
                              "loc": Object {
                                "end": 78,
                                "start": 0,
                              },
                            },
                          },
                        ]
                      }
                      variables={
                        Object {
                          "content": "mock content",
                          "id": "1",
                        }
                      }
                    >
                      <IdeaCardstyle__ideaP
                        contentEditable={true}
                        onInput={[Function]}
                        suppressContentEditableWarning={true}
                      >
                        <StyledComponent
                          contentEditable={true}
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "IdeaCardstyle__ideaP-wiedry-2",
                                "isStatic": true,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "width:100%;outline:none;border:black solid 1px;padding:5px;margin:0;overflow-wrap:break-word;word-break:break-all;",
                                ],
                              },
                              "displayName": "IdeaCardstyle__ideaP",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "IdeaCardstyle__ideaP-wiedry-2",
                              "target": "p",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                          onInput={[Function]}
                          suppressContentEditableWarning={true}
                        >
                          <p
                            className="c4"
                            contentEditable={true}
                            onInput={[Function]}
                            suppressContentEditableWarning={true}
                          >
                            mock content
                          </p>
                        </StyledComponent>
                      </IdeaCardstyle__ideaP>
                    </Mutation>
                  </li>
                </StyledComponent>
              </IdeaCardstyle__li>
            </IdeaCard>
          </ul>
        </StyledComponent>
      </IdeaCardContainerstyle__ul>
    </div>
  </StyledComponent>
</IdeaCardContainerstyle__IdeaContainer>
`;

exports[`IdeaCardContainer matches snapshot - loading 1`] = `
Array [
  <Memo()>
    <Query
      errorPolicy="all"
      onError={[Function]}
      query={
        Object {
          "definitions": Array [
            Object {
              "directives": Array [],
              "kind": "OperationDefinition",
              "name": Object {
                "kind": "Name",
                "value": "ME_IDEAS_QUERY",
              },
              "operation": "query",
              "selectionSet": Object {
                "kind": "SelectionSet",
                "selections": Array [
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "getUserIdeas",
                    },
                    "selectionSet": Object {
                      "kind": "SelectionSet",
                      "selections": Array [
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "id",
                          },
                          "selectionSet": undefined,
                        },
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "content",
                          },
                          "selectionSet": undefined,
                        },
                      ],
                    },
                  },
                ],
              },
              "variableDefinitions": Array [],
            },
          ],
          "kind": "Document",
          "loc": Object {
            "end": 78,
            "start": 0,
          },
        }
      }
    >
      <Memo()>
        <p>
          Loading ...
        </p>
      </Memo()>
    </Query>
  </Memo()>,
  <Memo()>
    <p>
      Loading ...
    </p>
  </Memo()>,
]
`;
