// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Layout matches snapshot - loaded 1`] = `
.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  grid-column: span 2;
  position: relative;
}

.c4 > img {
  width: 50px;
  position: absolute;
  top: -30px;
  left: 10px;
}

.c4 > textarea {
  padding: 10px;
  outline: none;
  min-height: 56px;
  width: 100%;
  resize: vertical;
  border: none;
  margin-right: 1px;
}

.c4 > button {
  border: none;
  outline: none;
  cursor: pointer;
  background-color: #fffacd;
  padding: 0;
}

.c4 > button:active {
  background-color: #FFFF99;
}

.c2 {
  grid-area: header;
  display: grid;
  grid-gap: 10px;
  background-color: #393939;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: 'header-left header-right';
  place-items: center center;
  padding: 10px 0 1px 0;
}

.c3 {
  font-size: 1.5rem;
  font-family: 'Play',sans-serif;
  color: #FFFF99;
  margin: 0 0 0 65px;
  justify-self: start;
  -webkit-letter-spacing: 0.05rem;
  -moz-letter-spacing: 0.05rem;
  -ms-letter-spacing: 0.05rem;
  letter-spacing: 0.05rem;
}

.c0 {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto 1fr;
  grid-template-areas: 'header' 'main';
}

.c1 {
  background-color: #393939;
  display: none;
  grid-area: header-margin-left;
}

.c5 {
  background-color: #393939;
  display: none;
  grid-area: header-margin-right;
}

@media screen and (min-width:600px) {
  .c4 > img {
    left: 0;
  }
}

@media screen and (min-width:600px) {
  .c2 {
    padding: 10px 20px 1px 20px;
  }
}

@media screen and (min-width:600px) {
  .c3 {
    margin-left: 70px;
  }
}

@media screen and (min-width:900px) {
  .c0 {
    grid-template-columns: 1fr 900px 1fr;
    grid-template-areas: 'header-margin-left header header-margin-right' '. main .';
  }
}

@media screen and (min-width:900px) {
  .c1 {
    display: block;
  }
}

@media screen and (min-width:900px) {
  .c5 {
    display: block;
  }
}

<Layoutstyle__divLayout>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Layoutstyle__divLayout-sc-1dxnmnd-0",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "display:grid;grid-template-columns:1fr;grid-template-rows:auto 1fr;grid-template-areas:'header' 'main';@media screen and (min-width:900px){grid-template-columns:1fr 900px 1fr;grid-template-areas:'header-margin-left header header-margin-right' '. main .';}",
          ],
        },
        "displayName": "Layoutstyle__divLayout",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Layoutstyle__divLayout-sc-1dxnmnd-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
    >
      <Layoutstyle__headerMarginLeft>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Layoutstyle__headerMarginLeft-sc-1dxnmnd-2",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "background-color:",
                  [Function],
                  ";display:none;@media screen and (min-width:900px){display:block;}",
                  "grid-area:header-margin-left;",
                ],
              },
              "displayName": "Layoutstyle__headerMarginLeft",
              "foldedComponentIds": Array [
                "Layoutstyle__headerMargin-sc-1dxnmnd-1",
              ],
              "render": [Function],
              "styledComponentId": "Layoutstyle__headerMarginLeft-sc-1dxnmnd-2",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c1"
          />
        </StyledComponent>
      </Layoutstyle__headerMarginLeft>
      <Memo()>
        <Headerstyle__header>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Headerstyle__header-sc-6zuvh-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "grid-area:header;display:grid;grid-gap:10px;background-color:",
                    [Function],
                    ";grid-template-columns:1fr 1fr;grid-template-areas:'header-left header-right';place-items:center center;padding:10px 0 1px 0;@media screen and (min-width:600px){padding:10px 20px 1px 20px;}",
                  ],
                },
                "displayName": "Headerstyle__header",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Headerstyle__header-sc-6zuvh-0",
                "target": "header",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <header
              className="c2"
            >
              <Headerstyle__h1>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Headerstyle__h1-sc-6zuvh-1",
                        "isStatic": false,
                        "lastClassName": "c3",
                        "rules": Array [
                          "font-size:1.5rem;font-family:'Play',sans-serif;color:",
                          [Function],
                          ";margin:0 0 0 65px;justify-self:start;letter-spacing:0.05rem;@media screen and (min-width:600px){margin-left:70px;}",
                        ],
                      },
                      "displayName": "Headerstyle__h1",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Headerstyle__h1-sc-6zuvh-1",
                      "target": "h1",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <h1
                    className="c3"
                  >
                    Starter
                  </h1>
                </StyledComponent>
              </Headerstyle__h1>
              <SignOn>
                <Memo()>
                  <Query
                    errorPolicy="all"
                    query={
                      Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "ME_QUERY",
                            },
                            "operation": "query",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "me",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                        "selectionSet": undefined,
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 60,
                          "start": 0,
                        },
                      }
                    }
                  >
                    <Memo()>
                      <p>
                        Loading ...
                      </p>
                    </Memo()>
                  </Query>
                </Memo()>
              </SignOn>
              <IdeaCardForm>
                <Mutation
                  errorPolicy="all"
                  mutation={
                    Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "CREATE_IDEA_MUTATION",
                          },
                          "operation": "mutation",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [
                                  Object {
                                    "kind": "Argument",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "content",
                                    },
                                    "value": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "content",
                                      },
                                    },
                                  },
                                ],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "createIdea",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "id",
                                      },
                                      "selectionSet": undefined,
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [
                            Object {
                              "defaultValue": undefined,
                              "directives": Array [],
                              "kind": "VariableDefinition",
                              "type": Object {
                                "kind": "NonNullType",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "String",
                                  },
                                },
                              },
                              "variable": Object {
                                "kind": "Variable",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "content",
                                },
                              },
                            },
                          ],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 109,
                        "start": 0,
                      },
                    }
                  }
                  onError={[Function]}
                  refetchQueries={
                    Array [
                      Object {
                        "query": Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "ME_IDEAS_QUERY",
                              },
                              "operation": "query",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "getUserIdeas",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "content",
                                          },
                                          "selectionSet": undefined,
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 78,
                            "start": 0,
                          },
                        },
                      },
                    ]
                  }
                  variables={
                    Object {
                      "content": "",
                    }
                  }
                >
                  <IdeaCardFormstyle__form
                    onSubmit={[Function]}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "IdeaCardFormstyle__form-sc-4er11-0",
                            "isStatic": false,
                            "lastClassName": "c4",
                            "rules": Array [
                              "display:flex;width:100%;grid-column:span 2;position:relative;> img{width:50px;position:absolute;top:-30px;left:10px;}> textarea{padding:10px;outline:none;min-height:56px;width:100%;resize:vertical;border:none;margin-right:1px;}> button{border:none;outline:none;cursor:pointer;background-color:",
                              [Function],
                              ";padding:0;&:active{background-color:",
                              [Function],
                              ";}}@media screen and (min-width:600px){> img{left:0;}}",
                            ],
                          },
                          "displayName": "IdeaCardFormstyle__form",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "IdeaCardFormstyle__form-sc-4er11-0",
                          "target": "form",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onSubmit={[Function]}
                    >
                      <form
                        className="c4"
                        onSubmit={[Function]}
                      >
                        <img
                          alt="ideabox"
                          src="static/ideabox.png"
                        />
                        <textarea
                          name="idea"
                          onChange={[Function]}
                          placeholder="What's on your mind?"
                          type="text"
                          value=""
                        />
                        <button
                          disabled={true}
                          type="submit"
                        >
                          Add Idea
                        </button>
                      </form>
                    </StyledComponent>
                  </IdeaCardFormstyle__form>
                </Mutation>
              </IdeaCardForm>
            </header>
          </StyledComponent>
        </Headerstyle__header>
      </Memo()>
      <Layoutstyle__headerMarginRight>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Layoutstyle__headerMarginRight-sc-1dxnmnd-3",
                "isStatic": false,
                "lastClassName": "c5",
                "rules": Array [
                  "background-color:",
                  [Function],
                  ";display:none;@media screen and (min-width:900px){display:block;}",
                  "grid-area:header-margin-right;",
                ],
              },
              "displayName": "Layoutstyle__headerMarginRight",
              "foldedComponentIds": Array [
                "Layoutstyle__headerMargin-sc-1dxnmnd-1",
              ],
              "render": [Function],
              "styledComponentId": "Layoutstyle__headerMarginRight-sc-1dxnmnd-3",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c5"
          />
        </StyledComponent>
      </Layoutstyle__headerMarginRight>
    </div>
  </StyledComponent>
</Layoutstyle__divLayout>
`;

exports[`Layout matches snapshot 1`] = `
.c4 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  grid-column: span 2;
  position: relative;
}

.c4 > img {
  width: 50px;
  position: absolute;
  top: -30px;
  left: 10px;
}

.c4 > textarea {
  padding: 10px;
  outline: none;
  min-height: 56px;
  width: 100%;
  resize: vertical;
  border: none;
  margin-right: 1px;
}

.c4 > button {
  border: none;
  outline: none;
  cursor: pointer;
  background-color: #fffacd;
  padding: 0;
}

.c4 > button:active {
  background-color: #FFFF99;
}

.c2 {
  grid-area: header;
  display: grid;
  grid-gap: 10px;
  background-color: #393939;
  grid-template-columns: 1fr 1fr;
  grid-template-areas: 'header-left header-right';
  place-items: center center;
  padding: 10px 0 1px 0;
}

.c3 {
  font-size: 1.5rem;
  font-family: 'Play',sans-serif;
  color: #FFFF99;
  margin: 0 0 0 65px;
  justify-self: start;
  -webkit-letter-spacing: 0.05rem;
  -moz-letter-spacing: 0.05rem;
  -ms-letter-spacing: 0.05rem;
  letter-spacing: 0.05rem;
}

.c0 {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto 1fr;
  grid-template-areas: 'header' 'main';
}

.c1 {
  background-color: #393939;
  display: none;
  grid-area: header-margin-left;
}

.c5 {
  background-color: #393939;
  display: none;
  grid-area: header-margin-right;
}

@media screen and (min-width:600px) {
  .c4 > img {
    left: 0;
  }
}

@media screen and (min-width:600px) {
  .c2 {
    padding: 10px 20px 1px 20px;
  }
}

@media screen and (min-width:600px) {
  .c3 {
    margin-left: 70px;
  }
}

@media screen and (min-width:900px) {
  .c0 {
    grid-template-columns: 1fr 900px 1fr;
    grid-template-areas: 'header-margin-left header header-margin-right' '. main .';
  }
}

@media screen and (min-width:900px) {
  .c1 {
    display: block;
  }
}

@media screen and (min-width:900px) {
  .c5 {
    display: block;
  }
}

<Layoutstyle__divLayout>
  <StyledComponent
    forwardedComponent={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Layoutstyle__divLayout-sc-1dxnmnd-0",
          "isStatic": true,
          "lastClassName": "c0",
          "rules": Array [
            "display:grid;grid-template-columns:1fr;grid-template-rows:auto 1fr;grid-template-areas:'header' 'main';@media screen and (min-width:900px){grid-template-columns:1fr 900px 1fr;grid-template-areas:'header-margin-left header header-margin-right' '. main .';}",
          ],
        },
        "displayName": "Layoutstyle__divLayout",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Layoutstyle__divLayout-sc-1dxnmnd-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    forwardedRef={null}
  >
    <div
      className="c0"
    >
      <Layoutstyle__headerMarginLeft>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Layoutstyle__headerMarginLeft-sc-1dxnmnd-2",
                "isStatic": false,
                "lastClassName": "c1",
                "rules": Array [
                  "background-color:",
                  [Function],
                  ";display:none;@media screen and (min-width:900px){display:block;}",
                  "grid-area:header-margin-left;",
                ],
              },
              "displayName": "Layoutstyle__headerMarginLeft",
              "foldedComponentIds": Array [
                "Layoutstyle__headerMargin-sc-1dxnmnd-1",
              ],
              "render": [Function],
              "styledComponentId": "Layoutstyle__headerMarginLeft-sc-1dxnmnd-2",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c1"
          />
        </StyledComponent>
      </Layoutstyle__headerMarginLeft>
      <Memo()>
        <Headerstyle__header>
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "Headerstyle__header-sc-6zuvh-0",
                  "isStatic": false,
                  "lastClassName": "c2",
                  "rules": Array [
                    "grid-area:header;display:grid;grid-gap:10px;background-color:",
                    [Function],
                    ";grid-template-columns:1fr 1fr;grid-template-areas:'header-left header-right';place-items:center center;padding:10px 0 1px 0;@media screen and (min-width:600px){padding:10px 20px 1px 20px;}",
                  ],
                },
                "displayName": "Headerstyle__header",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "Headerstyle__header-sc-6zuvh-0",
                "target": "header",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
          >
            <header
              className="c2"
            >
              <Headerstyle__h1>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "Headerstyle__h1-sc-6zuvh-1",
                        "isStatic": false,
                        "lastClassName": "c3",
                        "rules": Array [
                          "font-size:1.5rem;font-family:'Play',sans-serif;color:",
                          [Function],
                          ";margin:0 0 0 65px;justify-self:start;letter-spacing:0.05rem;@media screen and (min-width:600px){margin-left:70px;}",
                        ],
                      },
                      "displayName": "Headerstyle__h1",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "Headerstyle__h1-sc-6zuvh-1",
                      "target": "h1",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <h1
                    className="c3"
                  >
                    Starter
                  </h1>
                </StyledComponent>
              </Headerstyle__h1>
              <SignOn>
                <Memo()>
                  <Query
                    errorPolicy="all"
                    query={
                      Object {
                        "definitions": Array [
                          Object {
                            "directives": Array [],
                            "kind": "OperationDefinition",
                            "name": Object {
                              "kind": "Name",
                              "value": "ME_QUERY",
                            },
                            "operation": "query",
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "me",
                                  },
                                  "selectionSet": Object {
                                    "kind": "SelectionSet",
                                    "selections": Array [
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "id",
                                        },
                                        "selectionSet": undefined,
                                      },
                                      Object {
                                        "alias": undefined,
                                        "arguments": Array [],
                                        "directives": Array [],
                                        "kind": "Field",
                                        "name": Object {
                                          "kind": "Name",
                                          "value": "email",
                                        },
                                        "selectionSet": undefined,
                                      },
                                    ],
                                  },
                                },
                              ],
                            },
                            "variableDefinitions": Array [],
                          },
                        ],
                        "kind": "Document",
                        "loc": Object {
                          "end": 60,
                          "start": 0,
                        },
                      }
                    }
                  >
                    <Memo()>
                      <p>
                        Loading ...
                      </p>
                    </Memo()>
                  </Query>
                </Memo()>
              </SignOn>
              <IdeaCardForm>
                <Mutation
                  errorPolicy="all"
                  mutation={
                    Object {
                      "definitions": Array [
                        Object {
                          "directives": Array [],
                          "kind": "OperationDefinition",
                          "name": Object {
                            "kind": "Name",
                            "value": "CREATE_IDEA_MUTATION",
                          },
                          "operation": "mutation",
                          "selectionSet": Object {
                            "kind": "SelectionSet",
                            "selections": Array [
                              Object {
                                "alias": undefined,
                                "arguments": Array [
                                  Object {
                                    "kind": "Argument",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "content",
                                    },
                                    "value": Object {
                                      "kind": "Variable",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "content",
                                      },
                                    },
                                  },
                                ],
                                "directives": Array [],
                                "kind": "Field",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "createIdea",
                                },
                                "selectionSet": Object {
                                  "kind": "SelectionSet",
                                  "selections": Array [
                                    Object {
                                      "alias": undefined,
                                      "arguments": Array [],
                                      "directives": Array [],
                                      "kind": "Field",
                                      "name": Object {
                                        "kind": "Name",
                                        "value": "id",
                                      },
                                      "selectionSet": undefined,
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          "variableDefinitions": Array [
                            Object {
                              "defaultValue": undefined,
                              "directives": Array [],
                              "kind": "VariableDefinition",
                              "type": Object {
                                "kind": "NonNullType",
                                "type": Object {
                                  "kind": "NamedType",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "String",
                                  },
                                },
                              },
                              "variable": Object {
                                "kind": "Variable",
                                "name": Object {
                                  "kind": "Name",
                                  "value": "content",
                                },
                              },
                            },
                          ],
                        },
                      ],
                      "kind": "Document",
                      "loc": Object {
                        "end": 109,
                        "start": 0,
                      },
                    }
                  }
                  onError={[Function]}
                  refetchQueries={
                    Array [
                      Object {
                        "query": Object {
                          "definitions": Array [
                            Object {
                              "directives": Array [],
                              "kind": "OperationDefinition",
                              "name": Object {
                                "kind": "Name",
                                "value": "ME_IDEAS_QUERY",
                              },
                              "operation": "query",
                              "selectionSet": Object {
                                "kind": "SelectionSet",
                                "selections": Array [
                                  Object {
                                    "alias": undefined,
                                    "arguments": Array [],
                                    "directives": Array [],
                                    "kind": "Field",
                                    "name": Object {
                                      "kind": "Name",
                                      "value": "getUserIdeas",
                                    },
                                    "selectionSet": Object {
                                      "kind": "SelectionSet",
                                      "selections": Array [
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "id",
                                          },
                                          "selectionSet": undefined,
                                        },
                                        Object {
                                          "alias": undefined,
                                          "arguments": Array [],
                                          "directives": Array [],
                                          "kind": "Field",
                                          "name": Object {
                                            "kind": "Name",
                                            "value": "content",
                                          },
                                          "selectionSet": undefined,
                                        },
                                      ],
                                    },
                                  },
                                ],
                              },
                              "variableDefinitions": Array [],
                            },
                          ],
                          "kind": "Document",
                          "loc": Object {
                            "end": 78,
                            "start": 0,
                          },
                        },
                      },
                    ]
                  }
                  variables={
                    Object {
                      "content": "",
                    }
                  }
                >
                  <IdeaCardFormstyle__form
                    onSubmit={[Function]}
                  >
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "IdeaCardFormstyle__form-sc-4er11-0",
                            "isStatic": false,
                            "lastClassName": "c4",
                            "rules": Array [
                              "display:flex;width:100%;grid-column:span 2;position:relative;> img{width:50px;position:absolute;top:-30px;left:10px;}> textarea{padding:10px;outline:none;min-height:56px;width:100%;resize:vertical;border:none;margin-right:1px;}> button{border:none;outline:none;cursor:pointer;background-color:",
                              [Function],
                              ";padding:0;&:active{background-color:",
                              [Function],
                              ";}}@media screen and (min-width:600px){> img{left:0;}}",
                            ],
                          },
                          "displayName": "IdeaCardFormstyle__form",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "IdeaCardFormstyle__form-sc-4er11-0",
                          "target": "form",
                          "toString": [Function],
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                      onSubmit={[Function]}
                    >
                      <form
                        className="c4"
                        onSubmit={[Function]}
                      >
                        <img
                          alt="ideabox"
                          src="static/ideabox.png"
                        />
                        <textarea
                          name="idea"
                          onChange={[Function]}
                          placeholder="What's on your mind?"
                          type="text"
                          value=""
                        />
                        <button
                          disabled={true}
                          type="submit"
                        >
                          Add Idea
                        </button>
                      </form>
                    </StyledComponent>
                  </IdeaCardFormstyle__form>
                </Mutation>
              </IdeaCardForm>
            </header>
          </StyledComponent>
        </Headerstyle__header>
      </Memo()>
      <Layoutstyle__headerMarginRight>
        <StyledComponent
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "Layoutstyle__headerMarginRight-sc-1dxnmnd-3",
                "isStatic": false,
                "lastClassName": "c5",
                "rules": Array [
                  "background-color:",
                  [Function],
                  ";display:none;@media screen and (min-width:900px){display:block;}",
                  "grid-area:header-margin-right;",
                ],
              },
              "displayName": "Layoutstyle__headerMarginRight",
              "foldedComponentIds": Array [
                "Layoutstyle__headerMargin-sc-1dxnmnd-1",
              ],
              "render": [Function],
              "styledComponentId": "Layoutstyle__headerMarginRight-sc-1dxnmnd-3",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <div
            className="c5"
          />
        </StyledComponent>
      </Layoutstyle__headerMarginRight>
    </div>
  </StyledComponent>
</Layoutstyle__divLayout>
`;
