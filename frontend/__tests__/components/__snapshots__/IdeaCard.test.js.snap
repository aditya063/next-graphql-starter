// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IdeaCard matches snapshot 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  margin: 20px;
}

.c1 {
  background: none;
  background-image: url('/static/delete.svg');
  position: absolute;
  right: -10px;
  top: -10px;
  height: 20px;
  width: 20px;
  border: none;
  outline: none;
  cursor: pointer;
}

.c1:active {
  right: -8px;
  top: -8px;
  height: 17px;
  width: 17px;
}

.c2 {
  width: 100%;
  outline: none;
  padding: 5px;
  overflow-wrap: break-word;
  word-break: break-all;
}

<IdeaCard
  content="mock idea content"
  id="1"
>
  <IdeaCardstyle__li>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "IdeaCardstyle__li-wiedry-0",
            "isStatic": true,
            "lastClassName": "c0",
            "rules": Array [
              "display:flex;position:relative;margin:20px;",
            ],
          },
          "displayName": "IdeaCardstyle__li",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "IdeaCardstyle__li-wiedry-0",
          "target": "li",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <li
        className="c0"
      >
        <Mutation
          errorPolicy="all"
          mutation={
            Object {
              "definitions": Array [
                Object {
                  "directives": Array [],
                  "kind": "OperationDefinition",
                  "name": Object {
                    "kind": "Name",
                    "value": "DELETE_IDEA_MUTATION",
                  },
                  "operation": "mutation",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [
                          Object {
                            "kind": "Argument",
                            "name": Object {
                              "kind": "Name",
                              "value": "id",
                            },
                            "value": Object {
                              "kind": "Variable",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                            },
                          },
                        ],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "deleteIdea",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                              "selectionSet": undefined,
                            },
                          ],
                        },
                      },
                    ],
                  },
                  "variableDefinitions": Array [
                    Object {
                      "defaultValue": undefined,
                      "directives": Array [],
                      "kind": "VariableDefinition",
                      "type": Object {
                        "kind": "NonNullType",
                        "type": Object {
                          "kind": "NamedType",
                          "name": Object {
                            "kind": "Name",
                            "value": "ID",
                          },
                        },
                      },
                      "variable": Object {
                        "kind": "Variable",
                        "name": Object {
                          "kind": "Name",
                          "value": "id",
                        },
                      },
                    },
                  ],
                },
              ],
              "kind": "Document",
              "loc": Object {
                "end": 90,
                "start": 0,
              },
            }
          }
          onError={[Function]}
          refetchQueries={
            Array [
              Object {
                "query": Object {
                  "definitions": Array [
                    Object {
                      "directives": Array [],
                      "kind": "OperationDefinition",
                      "name": Object {
                        "kind": "Name",
                        "value": "ME_IDEAS_QUERY",
                      },
                      "operation": "query",
                      "selectionSet": Object {
                        "kind": "SelectionSet",
                        "selections": Array [
                          Object {
                            "alias": undefined,
                            "arguments": Array [],
                            "directives": Array [],
                            "kind": "Field",
                            "name": Object {
                              "kind": "Name",
                              "value": "getUserIdeas",
                            },
                            "selectionSet": Object {
                              "kind": "SelectionSet",
                              "selections": Array [
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "id",
                                  },
                                  "selectionSet": undefined,
                                },
                                Object {
                                  "alias": undefined,
                                  "arguments": Array [],
                                  "directives": Array [],
                                  "kind": "Field",
                                  "name": Object {
                                    "kind": "Name",
                                    "value": "content",
                                  },
                                  "selectionSet": undefined,
                                },
                              ],
                            },
                          },
                        ],
                      },
                      "variableDefinitions": Array [],
                    },
                  ],
                  "kind": "Document",
                  "loc": Object {
                    "end": 78,
                    "start": 0,
                  },
                },
              },
            ]
          }
          variables={
            Object {
              "id": "1",
            }
          }
        >
          <IdeaCardstyle__deleteBtn
            onClick={[Function]}
            type="button"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "IdeaCardstyle__deleteBtn-wiedry-1",
                    "isStatic": true,
                    "lastClassName": "c1",
                    "rules": Array [
                      "background:none;background-image:url('/static/delete.svg');position:absolute;right:-10px;top:-10px;height:20px;width:20px;border:none;outline:none;cursor:pointer;&:active{right:-8px;top:-8px;height:17px;width:17px;}",
                    ],
                  },
                  "displayName": "IdeaCardstyle__deleteBtn",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "IdeaCardstyle__deleteBtn-wiedry-1",
                  "target": "button",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onClick={[Function]}
              type="button"
            >
              <button
                className="c1"
                onClick={[Function]}
                type="button"
              />
            </StyledComponent>
          </IdeaCardstyle__deleteBtn>
        </Mutation>
        <Mutation
          errorPolicy="all"
          mutation={
            Object {
              "definitions": Array [
                Object {
                  "directives": Array [],
                  "kind": "OperationDefinition",
                  "name": Object {
                    "kind": "Name",
                    "value": "UPDATE_IDEA_MUTATION",
                  },
                  "operation": "mutation",
                  "selectionSet": Object {
                    "kind": "SelectionSet",
                    "selections": Array [
                      Object {
                        "alias": undefined,
                        "arguments": Array [
                          Object {
                            "kind": "Argument",
                            "name": Object {
                              "kind": "Name",
                              "value": "id",
                            },
                            "value": Object {
                              "kind": "Variable",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                            },
                          },
                          Object {
                            "kind": "Argument",
                            "name": Object {
                              "kind": "Name",
                              "value": "content",
                            },
                            "value": Object {
                              "kind": "Variable",
                              "name": Object {
                                "kind": "Name",
                                "value": "content",
                              },
                            },
                          },
                        ],
                        "directives": Array [],
                        "kind": "Field",
                        "name": Object {
                          "kind": "Name",
                          "value": "updateIdea",
                        },
                        "selectionSet": Object {
                          "kind": "SelectionSet",
                          "selections": Array [
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "id",
                              },
                              "selectionSet": undefined,
                            },
                            Object {
                              "alias": undefined,
                              "arguments": Array [],
                              "directives": Array [],
                              "kind": "Field",
                              "name": Object {
                                "kind": "Name",
                                "value": "content",
                              },
                              "selectionSet": undefined,
                            },
                          ],
                        },
                      },
                    ],
                  },
                  "variableDefinitions": Array [
                    Object {
                      "defaultValue": undefined,
                      "directives": Array [],
                      "kind": "VariableDefinition",
                      "type": Object {
                        "kind": "NonNullType",
                        "type": Object {
                          "kind": "NamedType",
                          "name": Object {
                            "kind": "Name",
                            "value": "ID",
                          },
                        },
                      },
                      "variable": Object {
                        "kind": "Variable",
                        "name": Object {
                          "kind": "Name",
                          "value": "id",
                        },
                      },
                    },
                    Object {
                      "defaultValue": undefined,
                      "directives": Array [],
                      "kind": "VariableDefinition",
                      "type": Object {
                        "kind": "NonNullType",
                        "type": Object {
                          "kind": "NamedType",
                          "name": Object {
                            "kind": "Name",
                            "value": "String",
                          },
                        },
                      },
                      "variable": Object {
                        "kind": "Variable",
                        "name": Object {
                          "kind": "Name",
                          "value": "content",
                        },
                      },
                    },
                  ],
                },
              ],
              "kind": "Document",
              "loc": Object {
                "end": 142,
                "start": 0,
              },
            }
          }
          onError={[Function]}
          variables={
            Object {
              "content": "mock idea content",
              "id": "1",
            }
          }
        >
          <IdeaCardstyle__ideaInput
            onChange={[Function]}
            type="text"
            value="mock idea content"
          >
            <StyledComponent
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "IdeaCardstyle__ideaInput-wiedry-2",
                    "isStatic": true,
                    "lastClassName": "c2",
                    "rules": Array [
                      "width:100%;outline:none;padding:5px;overflow-wrap:break-word;word-break:break-all;",
                    ],
                  },
                  "displayName": "IdeaCardstyle__ideaInput",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "IdeaCardstyle__ideaInput-wiedry-2",
                  "target": "input",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
              onChange={[Function]}
              type="text"
              value="mock idea content"
            >
              <input
                className="c2"
                onChange={[Function]}
                type="text"
                value="mock idea content"
              />
            </StyledComponent>
          </IdeaCardstyle__ideaInput>
        </Mutation>
      </li>
    </StyledComponent>
  </IdeaCardstyle__li>
</IdeaCard>
`;
