# import * from './schema_prep.graphql'

type Query {
  user(id: ID!): User

  users(where: UserWhereInput, orderBy: UserOrderByInput): [User!]!

  usersConnection: UserConnection!

  idea(id: ID!): Idea

  ideas(where: IdeaWhereInput, orderBy: IdeaOrderByInput): [Idea!]!

  ideasConnection: IdeaConnection!

  currentUser: User

  currentUserPaginatedIdeas(
    where: IdeaWhereInput
    orderBy: IdeaOrderByInput
    """
    Number of nodes per page
    """
    first: Int
    """
    Return results after this cursor
    """
    after: String
    """
    Seek backwards
    """
    last: Int
    """
    Return results before this cursor
    """
    before: String
  ): IdeaConnection
}

type Mutation {
  signUp(email: String!, password: String!, confirmPassword: String!): User!

  signIn(email: String!, password: String!): User!

  signOut: Boolean!

  requestReset(email: String!): Boolean!

  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): Boolean!

  createIdea(content: String!): Idea!

  updateIdea(id: ID!, content: String!): Idea!

  deleteIdea(id: ID!): Idea!

  # refreshAccessToken(refreshToken: String!): Token!
}

type User {
  id: ID!
  email: String!
  ideas: [Idea!]!
}

type Idea {
  id: ID!
  content: String!
  author: User!
}

# type Token {
#   token: String!
#   refreshToken: String!
# }
